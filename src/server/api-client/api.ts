/* tslint:disable */
/* eslint-disable */
/**
 * LanPartySeating
 * API seating service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {Array<number>}
     * @memberof Config
     */
    'columns'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteSeats
 */
export interface DeleteSeats {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteSeats
     */
    'seatIdsToDelete'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteSeatsWithEmployeeId
 */
export interface DeleteSeatsWithEmployeeId {
    /**
     * 
     * @type {string}
     * @memberof DeleteSeatsWithEmployeeId
     */
    'employeeId'?: string;
    /**
     * 
     * @type {Array<DeleteSeatsWithEmployeeIdSeatReservationsInner>}
     * @memberof DeleteSeatsWithEmployeeId
     */
    'seatReservations'?: Array<DeleteSeatsWithEmployeeIdSeatReservationsInner>;
}
/**
 * 
 * @export
 * @interface DeleteSeatsWithEmployeeIdSeatReservationsInner
 */
export interface DeleteSeatsWithEmployeeIdSeatReservationsInner {
    /**
     * 
     * @type {number}
     * @memberof DeleteSeatsWithEmployeeIdSeatReservationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeleteSeatsWithEmployeeIdSeatReservationsInner
     */
    'reservationDate'?: string;
}
/**
 * 
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feedback
     */
    'feedback'?: string;
    /**
     * 
     * @type {number}
     * @memberof Feedback
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface FeedbackOnly
 */
export interface FeedbackOnly {
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedbackOnly
     */
    'feedbackOnly'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetFeedbackOnlyRequest
 */
export interface GetFeedbackOnlyRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof GetFeedbackOnlyRequest
     */
    'feedbackIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface GridPosition
 */
export interface GridPosition {
    /**
     * 
     * @type {number}
     * @memberof GridPosition
     */
    'row'?: number;
    /**
     * 
     * @type {number}
     * @memberof GridPosition
     */
    'column'?: number;
}
/**
 * 
 * @export
 * @interface PersonName
 */
export interface PersonName {
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    'lastName'?: string;
}
/**
 * A Problem Detail
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * HTTP status code
     * @type {number}
     * @memberof Problem
     */
    'status'?: number;
    /**
     * A URI reference that identifies the problem type
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * Http status code description
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * Detailed description of the problem
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * 
     * @type {ProblemContext}
     * @memberof Problem
     */
    'context'?: ProblemContext;
}
/**
 * Problem context
 * @export
 * @interface ProblemContext
 */
export interface ProblemContext {
    /**
     * Custom type
     * @type {string}
     * @memberof ProblemContext
     */
    'type'?: string;
    /**
     * Custom detail
     * @type {string}
     * @memberof ProblemContext
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface RatingsWithAverageRating
 */
export interface RatingsWithAverageRating {
    /**
     * 
     * @type {Array<number>}
     * @memberof RatingsWithAverageRating
     */
    'ratings'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof RatingsWithAverageRating
     */
    'averageRating'?: number;
}
/**
 * 
 * @export
 * @interface ReserveSeat
 */
export interface ReserveSeat {
    /**
     * 
     * @type {number}
     * @memberof ReserveSeat
     */
    'id'?: number;
    /**
     * 
     * @type {PersonName}
     * @memberof ReserveSeat
     */
    'personName'?: PersonName;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReserveSeat
     */
    'reservationDates'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ReserveSeats
 */
export interface ReserveSeats {
    /**
     * 
     * @type {ReservedBy}
     * @memberof ReserveSeats
     */
    'reservedBy'?: ReservedBy;
    /**
     * 
     * @type {Array<ReserveSeat>}
     * @memberof ReserveSeats
     */
    'reserveSeats'?: Array<ReserveSeat>;
}
/**
 * 
 * @export
 * @interface ReservedBy
 */
export interface ReservedBy {
    /**
     * 
     * @type {string}
     * @memberof ReservedBy
     */
    'employeeId'?: string;
    /**
     * 
     * @type {PersonName}
     * @memberof ReservedBy
     */
    'personName'?: PersonName;
}
/**
 * 
 * @export
 * @interface ReservedSeat
 */
export interface ReservedSeat {
    /**
     * 
     * @type {number}
     * @memberof ReservedSeat
     */
    'id'?: number;
    /**
     * 
     * @type {GridPosition}
     * @memberof ReservedSeat
     */
    'gridPosition'?: GridPosition;
    /**
     * 
     * @type {PersonName}
     * @memberof ReservedSeat
     */
    'personName'?: PersonName;
}
/**
 * 
 * @export
 * @interface ReservedSeats
 */
export interface ReservedSeats {
    /**
     * 
     * @type {Array<ReservedSeat & ReserveSeat>}
     * @memberof ReservedSeats
     */
    'reservedSeats'?: Array<ReservedSeat & ReserveSeat>;
}
/**
 * 
 * @export
 * @interface UpdateEmployee
 */
export interface UpdateEmployee {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    'newEmployeeId'?: string;
    /**
     * 
     * @type {PersonName}
     * @memberof UpdateEmployee
     */
    'personName'?: PersonName;
}

/**
 * AddFeedbackApi - axios parameter creator
 * @export
 */
export const AddFeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add feedback
         * @param {Feedback} [feedback] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeedback: async (feedback?: Feedback, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedback, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddFeedbackApi - functional programming interface
 * @export
 */
export const AddFeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddFeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add feedback
         * @param {Feedback} [feedback] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeedback(feedback?: Feedback, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeedback(feedback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddFeedbackApi - factory interface
 * @export
 */
export const AddFeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddFeedbackApiFp(configuration)
    return {
        /**
         * 
         * @summary Add feedback
         * @param {Feedback} [feedback] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeedback(feedback?: Feedback, options?: any): AxiosPromise<void> {
            return localVarFp.addFeedback(feedback, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddFeedbackApi - object-oriented interface
 * @export
 * @class AddFeedbackApi
 * @extends {BaseAPI}
 */
export class AddFeedbackApi extends BaseAPI {
    /**
     * 
     * @summary Add feedback
     * @param {Feedback} [feedback] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddFeedbackApi
     */
    public addFeedback(feedback?: Feedback, options?: AxiosRequestConfig) {
        return AddFeedbackApiFp(this.configuration).addFeedback(feedback, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeleteReservedSeatsBelongingToAnEmployeeApi - axios parameter creator
 * @export
 */
export const DeleteReservedSeatsBelongingToAnEmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete seat reservations for a specific employee
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservedSeatsBelongingToAnEmployee: async (deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/seating`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteSeatsWithEmployeeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeleteReservedSeatsBelongingToAnEmployeeApi - functional programming interface
 * @export
 */
export const DeleteReservedSeatsBelongingToAnEmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeleteReservedSeatsBelongingToAnEmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete seat reservations for a specific employee
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeleteReservedSeatsBelongingToAnEmployeeApi - factory interface
 * @export
 */
export const DeleteReservedSeatsBelongingToAnEmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeleteReservedSeatsBelongingToAnEmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete seat reservations for a specific employee
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeleteReservedSeatsBelongingToAnEmployeeApi - object-oriented interface
 * @export
 * @class DeleteReservedSeatsBelongingToAnEmployeeApi
 * @extends {BaseAPI}
 */
export class DeleteReservedSeatsBelongingToAnEmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Delete seat reservations for a specific employee
     * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteReservedSeatsBelongingToAnEmployeeApi
     */
    public deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: AxiosRequestConfig) {
        return DeleteReservedSeatsBelongingToAnEmployeeApiFp(this.configuration).deleteReservedSeatsBelongingToAnEmployee(deleteSeatsWithEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeleteSeatReservationsApi - axios parameter creator
 * @export
 */
export const DeleteSeatReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete seat reservations
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeats: async (deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/seating/delete-with-seat-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteSeatsWithEmployeeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeleteSeatReservationsApi - functional programming interface
 * @export
 */
export const DeleteSeatReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeleteSeatReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete seat reservations
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeats(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeats(deleteSeatsWithEmployeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeleteSeatReservationsApi - factory interface
 * @export
 */
export const DeleteSeatReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeleteSeatReservationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete seat reservations
         * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeats(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSeats(deleteSeatsWithEmployeeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeleteSeatReservationsApi - object-oriented interface
 * @export
 * @class DeleteSeatReservationsApi
 * @extends {BaseAPI}
 */
export class DeleteSeatReservationsApi extends BaseAPI {
    /**
     * 
     * @summary Delete seat reservations
     * @param {DeleteSeatsWithEmployeeId} [deleteSeatsWithEmployeeId] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteSeatReservationsApi
     */
    public deleteSeats(deleteSeatsWithEmployeeId?: DeleteSeatsWithEmployeeId, options?: AxiosRequestConfig) {
        return DeleteSeatReservationsApiFp(this.configuration).deleteSeats(deleteSeatsWithEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetFeedbackOnlyApi - axios parameter creator
 * @export
 */
export const GetFeedbackOnlyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve feedback based on provided list
         * @param {GetFeedbackOnlyRequest} [getFeedbackOnlyRequest] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackOnly: async (getFeedbackOnlyRequest?: GetFeedbackOnlyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/feedback/retrieve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFeedbackOnlyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetFeedbackOnlyApi - functional programming interface
 * @export
 */
export const GetFeedbackOnlyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetFeedbackOnlyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve feedback based on provided list
         * @param {GetFeedbackOnlyRequest} [getFeedbackOnlyRequest] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedbackOnly(getFeedbackOnlyRequest?: GetFeedbackOnlyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackOnly>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedbackOnly(getFeedbackOnlyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetFeedbackOnlyApi - factory interface
 * @export
 */
export const GetFeedbackOnlyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetFeedbackOnlyApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve feedback based on provided list
         * @param {GetFeedbackOnlyRequest} [getFeedbackOnlyRequest] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackOnly(getFeedbackOnlyRequest?: GetFeedbackOnlyRequest, options?: any): AxiosPromise<FeedbackOnly> {
            return localVarFp.getFeedbackOnly(getFeedbackOnlyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetFeedbackOnlyApi - object-oriented interface
 * @export
 * @class GetFeedbackOnlyApi
 * @extends {BaseAPI}
 */
export class GetFeedbackOnlyApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve feedback based on provided list
     * @param {GetFeedbackOnlyRequest} [getFeedbackOnlyRequest] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetFeedbackOnlyApi
     */
    public getFeedbackOnly(getFeedbackOnlyRequest?: GetFeedbackOnlyRequest, options?: AxiosRequestConfig) {
        return GetFeedbackOnlyApiFp(this.configuration).getFeedbackOnly(getFeedbackOnlyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetLayoutConfigApi - axios parameter creator
 * @export
 */
export const GetLayoutConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get layout config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetLayoutConfigApi - functional programming interface
 * @export
 */
export const GetLayoutConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetLayoutConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get layout config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetLayoutConfigApi - factory interface
 * @export
 */
export const GetLayoutConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetLayoutConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary Get layout config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutConfig(options?: any): AxiosPromise<Config> {
            return localVarFp.getLayoutConfig(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetLayoutConfigApi - object-oriented interface
 * @export
 * @class GetLayoutConfigApi
 * @extends {BaseAPI}
 */
export class GetLayoutConfigApi extends BaseAPI {
    /**
     * 
     * @summary Get layout config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetLayoutConfigApi
     */
    public getLayoutConfig(options?: AxiosRequestConfig) {
        return GetLayoutConfigApiFp(this.configuration).getLayoutConfig(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetRatingsAndAverageRatingApi - axios parameter creator
 * @export
 */
export const GetRatingsAndAverageRatingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all ratings and average rating
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsAndAverageRating: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/feedback/ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetRatingsAndAverageRatingApi - functional programming interface
 * @export
 */
export const GetRatingsAndAverageRatingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetRatingsAndAverageRatingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all ratings and average rating
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRatingsAndAverageRating(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRatingsAndAverageRating(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetRatingsAndAverageRatingApi - factory interface
 * @export
 */
export const GetRatingsAndAverageRatingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetRatingsAndAverageRatingApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all ratings and average rating
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsAndAverageRating(options?: any): AxiosPromise<void> {
            return localVarFp.getRatingsAndAverageRating(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetRatingsAndAverageRatingApi - object-oriented interface
 * @export
 * @class GetRatingsAndAverageRatingApi
 * @extends {BaseAPI}
 */
export class GetRatingsAndAverageRatingApi extends BaseAPI {
    /**
     * 
     * @summary Get all ratings and average rating
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetRatingsAndAverageRatingApi
     */
    public getRatingsAndAverageRating(options?: AxiosRequestConfig) {
        return GetRatingsAndAverageRatingApiFp(this.configuration).getRatingsAndAverageRating(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetSeatsApi - axios parameter creator
 * @export
 */
export const GetSeatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all current reserved seats
         * @param {string} [dates] Search with dates e.g. 2023-09-29,2023-09-30
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservesSeats: async (dates?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/seating`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetSeatsApi - functional programming interface
 * @export
 */
export const GetSeatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetSeatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all current reserved seats
         * @param {string} [dates] Search with dates e.g. 2023-09-29,2023-09-30
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservesSeats(dates?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedSeats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservesSeats(dates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetSeatsApi - factory interface
 * @export
 */
export const GetSeatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetSeatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all current reserved seats
         * @param {string} [dates] Search with dates e.g. 2023-09-29,2023-09-30
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservesSeats(dates?: string, options?: any): AxiosPromise<ReservedSeats> {
            return localVarFp.getReservesSeats(dates, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetSeatsApi - object-oriented interface
 * @export
 * @class GetSeatsApi
 * @extends {BaseAPI}
 */
export class GetSeatsApi extends BaseAPI {
    /**
     * 
     * @summary Get all current reserved seats
     * @param {string} [dates] Search with dates e.g. 2023-09-29,2023-09-30
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetSeatsApi
     */
    public getReservesSeats(dates?: string, options?: AxiosRequestConfig) {
        return GetSeatsApiFp(this.configuration).getReservesSeats(dates, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReserveSeatsApi - axios parameter creator
 * @export
 */
export const ReserveSeatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Reserve seats
         * @param {ReserveSeats} [reserveSeats] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reserveSeats: async (reserveSeats?: ReserveSeats, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/seating`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reserveSeats, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReserveSeatsApi - functional programming interface
 * @export
 */
export const ReserveSeatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReserveSeatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Reserve seats
         * @param {ReserveSeats} [reserveSeats] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reserveSeats(reserveSeats?: ReserveSeats, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reserveSeats(reserveSeats, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReserveSeatsApi - factory interface
 * @export
 */
export const ReserveSeatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReserveSeatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Reserve seats
         * @param {ReserveSeats} [reserveSeats] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reserveSeats(reserveSeats?: ReserveSeats, options?: any): AxiosPromise<void> {
            return localVarFp.reserveSeats(reserveSeats, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReserveSeatsApi - object-oriented interface
 * @export
 * @class ReserveSeatsApi
 * @extends {BaseAPI}
 */
export class ReserveSeatsApi extends BaseAPI {
    /**
     * 
     * @summary Reserve seats
     * @param {ReserveSeats} [reserveSeats] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReserveSeatsApi
     */
    public reserveSeats(reserveSeats?: ReserveSeats, options?: AxiosRequestConfig) {
        return ReserveSeatsApiFp(this.configuration).reserveSeats(reserveSeats, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdateConfigApi - axios parameter creator
 * @export
 */
export const UpdateConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Set layout config
         * @param {Config} [config] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig: async (config?: Config, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(config, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateConfigApi - functional programming interface
 * @export
 */
export const UpdateConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Set layout config
         * @param {Config} [config] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfig(config?: Config, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfig(config, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateConfigApi - factory interface
 * @export
 */
export const UpdateConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary Set layout config
         * @param {Config} [config] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig(config?: Config, options?: any): AxiosPromise<void> {
            return localVarFp.updateConfig(config, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateConfigApi - object-oriented interface
 * @export
 * @class UpdateConfigApi
 * @extends {BaseAPI}
 */
export class UpdateConfigApi extends BaseAPI {
    /**
     * 
     * @summary Set layout config
     * @param {Config} [config] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateConfigApi
     */
    public updateConfig(config?: Config, options?: AxiosRequestConfig) {
        return UpdateConfigApiFp(this.configuration).updateConfig(config, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdateEmployeeApi - axios parameter creator
 * @export
 */
export const UpdateEmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update employee
         * @param {UpdateEmployee} [updateEmployee] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (updateEmployee?: UpdateEmployee, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateEmployeeApi - functional programming interface
 * @export
 */
export const UpdateEmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateEmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update employee
         * @param {UpdateEmployee} [updateEmployee] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(updateEmployee?: UpdateEmployee, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(updateEmployee, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateEmployeeApi - factory interface
 * @export
 */
export const UpdateEmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateEmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Update employee
         * @param {UpdateEmployee} [updateEmployee] Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(updateEmployee?: UpdateEmployee, options?: any): AxiosPromise<void> {
            return localVarFp.updateEmployee(updateEmployee, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateEmployeeApi - object-oriented interface
 * @export
 * @class UpdateEmployeeApi
 * @extends {BaseAPI}
 */
export class UpdateEmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Update employee
     * @param {UpdateEmployee} [updateEmployee] Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateEmployeeApi
     */
    public updateEmployee(updateEmployee?: UpdateEmployee, options?: AxiosRequestConfig) {
        return UpdateEmployeeApiFp(this.configuration).updateEmployee(updateEmployee, options).then((request) => request(this.axios, this.basePath));
    }
}



